#define R 'R'  // CARACTER QUE REPRESENTA EN LA SOLUCION UN MOVIMIENTO DE LA CARA DERECHA SENTIDO HORARIO
#define L 'L'  // CARACTER QUE REPRESENTA EN LA SOLUCION UN MOVIMIENTO DE LA CARA IZQUIERDA SENTIDO HORARIO
#define D 'D'  // CARACTER QUE REPRESENTA EN LA SOLUCION UN MOVIMIENTO DE LA CARA INFERIOR SENTIDO HORARIO
#define U 'U'  // CARACTER QUE REPRESENTA EN LA SOLUCION UN MOVIMIENTO DE LA CARA SUPERIOR SENTIDO HORARIO
#define B 'B'  // CARACTER QUE REPRESENTA EN LA SOLUCION UN MOVIMIENTO DE LA CARA TRASERA SENTIDO HORARIO
#define FC 'F' // CARACTER QUE REPRESENTA EN LA SOLUCION UN MOVIMIENTO DE LA CARA FRONTAL SENTIDO HORARIO
#define RA 'X' // CARACTER QUE REPRESENTA EN LA SOLUCION UN MOVIMIENTO DE LA CARA DERECHA SENTIDO ANTI-HORARIO
#define LA 'Y' // CARACTER QUE REPRESENTA EN LA SOLUCION UN MOVIMIENTO DE LA CARA IZQUIERDA SENTIDO ANTI-HORARIO
#define DA 'Z' // CARACTER QUE REPRESENTA EN LA SOLUCION UN MOVIMIENTO DE LA CARA INFERIOR SENTIDO ANTI-HORARIO
#define UA 'V' // CARACTER QUE REPRESENTA EN LA SOLUCION UN MOVIMIENTO DE LA CARA SUPERIOR SENTIDO ANTI-HORARIO
#define BA 'W' // CARACTER QUE REPRESENTA EN LA SOLUCION UN MOVIMIENTO DE LA CARA TRASERA SENTIDO ANTI-HORARIO
#define FA 'N' // CARACTER QUE REPRESENTA EN LA SOLUCION UN MOVIMIENTO DE LA CARA FRONTAL SENTIDO ANTI-HORARIO


#include <SPI.h>
#include <Ethernet.h>
byte mac[] = {
  0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED
};
IPAddress ip(192, 168, 1, 177);
EthernetServer server(80);


// L Y R SERAN MOVIDOS POR LOS BRAZOS INFERIOR Y SUPERIOR EN FORMA RELATIVA A COMO SE COLOQUE EL CUBO
// U B F D SERAN MOVIDOS POR EL BRAZO LATERAL 
char posBrazoLateral='N';  // VARIABLE GLOBAL QUE ALMACENA LA POSICION ACTUAL DEL BRAZO LATERAL


void setup() {
}

void loop() {

}

//RUTINA PARA MOVER EN SENTIDO HORARIO LA CARA DERECHA DEL CUBO
void r()
{
}
//RUTINA PARA MOVER EN SENTIDO ANTI-HORARIO LA CARA DERECHA DEL CUBO
void rA()
{
}
//RUTINA PARA MOVER EN SENTIDO HORARIO LA CARA IZQUIERDA DEL CUBO
void l()
{
}
//RUTINA PARA MOVER EN SENTIDO ANTI-HORARIO LA CARA IZQUIERDA DEL CUBO
void lA()
{
}
//RUTINA PARA MOVER EN SENTIDO HORARIO LA CARA INFERIOR DEL CUBO
void d()
{
   //INDICO POS ACTUAL DEL BRAZO LATERAL
   posBrazoLateral = D;
}
//RUTINA PARA MOVER EN SENTIDO ANTI-HORARIO LA CARA INFERIOR DEL CUBO
void dA()
{
   //INDICO POS ACTUAL DEL BRAZO LATERAL
   posBrazoLateral = D;
}
//RUTINA PARA MOVER EN SENTIDO HORARIO LA CARA SUPERIOR DEL CUBO
void u()
{
   //INDICO POS ACTUAL DEL BRAZO LATERAL
   posBrazoLateral = U;
}
//RUTINA PARA MOVER EN SENTIDO ANTI-HORARIO LA CARA SUPERIOR DEL CUBO
void uA()
{
   //INDICO POS ACTUAL DEL BRAZO LATERAL
   posBrazoLateral = U;
}
//RUTINA PARA MOVER EN SENTIDO HORARIO LA CARA TRASERA DEL CUBO
void b()
{
   //INDICO POS ACTUAL DEL BRAZO LATERAL
   posBrazoLateral = B;
}
//RUTINA PARA MOVER EN SENTIDO ANTI-HORARIO LA CARA TRASERA DEL CUBO
void bA()
{
   //INDICO POS ACTUAL DEL BRAZO LATERAL
   posBrazoLateral = B;
}
//RUTINA PARA MOVER EN SENTIDO HORARIO LA CARA FRONTAL DEL CUBO
void f()
{
   //INDICO POS ACTUAL DEL BRAZO LATERAL
   posBrazoLateral = FC;
}
//RUTINA PARA MOVER EN SENTIDO ANTI-HORARIO LA CARA FRONTAL DEL CUBO
void fA()
{
   //INDICO POS ACTUAL DEL BRAZO LATERAL
   posBrazoLateral = FC;
}



// TRADUCE LA LECTURA DE LA SOLUCION EN LLAMADA A LAS FUNCIONES PARA LOS MOVIMIENTOS
void mover(char m){
  switch(m){
    case R:
      r();
    break;
    case RA:
      rA();
    break;
    case L:
      l();
    break;
    case LA:
      lA();
    break;
    case U:
      u();
    break;
    case UA:
      uA();
    break;
    case D:
      d();
    break;
    case DA:
      dA();
    break;
    case B:
      b();
    break;
    case BA:
      bA();
    break;
    case FC:
      f();
    break;
    case FA:
      fA();
    break;
  }
}

